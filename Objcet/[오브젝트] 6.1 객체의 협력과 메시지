# 6. 메시지와 인터페이스
객체지향 프로그래밍에 대한 가장 흔한 오해는, **애플리케이션을 클래스의 집합으로 구성된다는 생각이다.** <br>
클래스는 개발자가 직접 만지고, 실험할 수 있는 실제적이면서 구체적인 도구지만, 도구에 지나지 않는다. 이런 구현 도구에 지나치게 집착하면 유연하지 못한 설계에 이를 확률이 높아진다고 한다. <br>

결국 또 객체. <br>
**결국 집중해야할 것은 객체이다.** 당연한 이야기지만 클래스에 집중하게 된건, 객체라는 추상적인 개념을 머릿 속에 잡기 위해 구체적인 무언가를 잡다 보니 그렇게 된것 같다. <br>
하지만 결국 객체고, **가장 초점을 맞춰야 할 것은 협력 안에서 객체가 수행하는 책임이다.** 책임은 객체가 수신할 수 있는 **메시지의 기반이 된다.** <br>


애플리케이션은 클래스로 구성되고 메시지로 정의된다. <br> 
숙련된 객체지향 설계의 첫 걸음은 초점을 클래스 사이의 관계에서 메시지 사이의 동적인 흐름으로 바꾸는 것이다. <br>
**객체가 수신하는 메시지들이 객체의 퍼블릭 인터페이스를 구성한다.** 유연하고, 재사용 가능한 인터페이스를 만드는 데 도움이 되는 디미터 법칙, 묻지 말고 시켜라 등의 설계 원칙들을 익히고 적용해야 한다. <br>

## 1. 협력과 메시지
협력은 어떤 객체가 다른 객체에게 무언가를 요청할 때 시작된다. **메시지는 객체 사이의 협력을 가능케하는 매개체다.** <br>
객체가 다른 객체에게 접근할 수 있는 **유일한 방법은 메시지를 전송하는 것** 뿐이다. **객체는 자신의 '희망'을 메시지라는 형태로 전송하고, 메시지를 수신한 객체는 요청을 적절히 처리한 후 응답한다.** <Br>
**이처럼 메시지를 매개로 하는 요청과 응답의 조합이 두 객체 사이의 협력을 구성한다.** <br>


### 메시지와 메시지 전송
**메시지는 객체들이 협력하기 위해 사용할 수 있는 유일한 의사소통 수단이다.** <br>
한 객체가 다른 객체에게 도움을 요청하는 것을 `message sending`, 혹은 `message passing`이라고 부른다. <Br>
**메시지는 오퍼레이션명과 인자로 구성되어 있고**, 메시지 전송시엔 메시지 수신자가 추가된다. <br>
**따라서 메시지 전송은 메시지 수신자, 오퍼레이션명, 인자의 조합으로 나타난다.** <br> <br>
`condition`이라는 변수가 `isSatisfiedBy`라는 메서드를 가지고 있고, 인자로 `screening`이라는 변수가 들어가게 된다면, 
`condition`이 메시지의 수신자 역할을 하게 되고, 오퍼레이션 명 `isSatisfiedBy`와 인자 `screening`의 조합으로, `isSatisfiedBy(screening)`이 메시지가 된다. <br>
**결론적으로 메시지 전송은 `condition.isSatisfiedBy(screening)`과 같은 형태가 된다.** <br>


### 메시지와 메서드
**메시지를 수신했을 때 실제로 어떤 코드가 실행되는지는 메시지 수신자의 실제 타입에 달려 있다.** <Br>
바로 위의 예시에서, `condition` 변수의 클래스에 따라 `isSatisfiedBy`의 내부 구현이 다를 것이다! <br>

**이처럼 메시지를 수신했을 때 실제로 실행되는 함수 또는 프로시저를 메서드라고 한다.** 중요한 것은 코드 상에서 변수 condition은 다 똑같은 condition이지만, **객체의 타입에 따라 실행되는 메서드는 다르다!** 는 것이다. <br>

전통적인 방식의 개발은 어떤 코드가 실행될지 정확히 알고 있는 상황에서 함수 호출이나 프로시저 호출 구문을 작성한다. **코드의 의미가 컴파일 시점과 실행 시점에 동일하기 때문이다.** 반면 객체는 메시지와 메서드를 실행 시점에 연결하므로, 컴파일 시점과 실행시점의 의미가 달라질 수 있다. <br>
말이 어려운데, 메시지는 오퍼레이션에 보내지므로, 실제 런타임에선 어떤 클래스에 의존하게 되냐에 따라 전송되는 메시지는 항상 같지만, 수행되는 메서드는 실행 시점에 달라질 수 있다는 것이다. <br>

**우리는 그저 메시지에 응답할 수 있는 객체가 존재하고, 그 객체가 적절한 메서드를 선택해서 응답할 것이라고 믿을 수 밖에 없다.** <br> <br>

메시지와 메서드의 구분은 메시지 전송자와 수신자가 느슨하게 결합할 수 있도록 해준다. <br>
메시지 전송자는 자신이 어떤 메시지를 전송해야 하는지만 알면 된다! 수신자가 누구인지? 또 어떻게 내 메시지를 처리하는지는 몰라도 원활한 협력이 가능하다! <br>
수신자 역시 누가 전송하는지 몰라도 된다! 단지 메시지가 도착했다는 사실만 알면 된다. **메시지 수신자는 메시지 처리를 위해 필요한 메서드를 스스로 결정할 자유가 있다!**
실행 시점에 메시지와 메서드를 바인딩하는 메커니즘은 두 객체 사이의 결합도를 낮춤으로써 유연하고 확장 가능한 코드를 작성할 수 있게 만든다. 메시지 전송자와 수신자는 그저 얇고 가는 끈인 **메시지로** 연결 되어 있을 뿐이다. <br>

## 퍼블릭 인터페이스와 오퍼레이션
객체는 안과 밖의 뚜렷한 경계를 가진다. <br>
외부에서 볼 때 객체의 안쪽은 미지의 영역이다. <br>
그리고 **외부의 객체는 오직 객체가 공개하는 메시지를 통해서만 객체와 상호작용 할 수 있다.** <br>
이처럼 **객체가 의사소통을 위해 외부에 공개하는 메시지의 집합을 퍼블릭 인터페이스라고 부른다.** <br>

오퍼레이션은 뭘까? 프로그래밍 언어의 관점에서 **퍼블릭 인터페이스에 포함된 메시지를 오퍼레이션이라고 부른다.** <br>
`오퍼레이션은 수행 가능한 어떤 행동에 대한 추상화다.` 오퍼레이션이라 함은 흔히 **내부 구현 코드는 제외하고, 단순히 메시지와 관련된 시그니처를 가리키는 경우가 대부분이다.**
말이 어려운데, 추상화가 잘 된 인터페이스를 떠올려 보자. 그리고 해당 인터페이스에서 호출 가능한 메서드와 인자가 오퍼레이션이 될 것이다. 물론 여기서 메서드라는 표현을 썼지만, 실제 메서드는 구현체의 메서드를 메서드라고 부르는 것이 옳다! <br>
그러니까, 위의 예시에서 `isStatisfiedBy`가 오퍼레이션이고, 실제로 실행되는 클래스 `ACondition`의 `isStatisfiedBy` 와 `BCondition`의 `isStatisfiedBy`는 메서드라고 부른다. 인터페이스의 각 요소가 오퍼레이션이다.


## Signature
**오퍼레이션 또는 메서드의 이름과 파라미터 목록을 합쳐 시그니처라고 부른다.** <br>

오퍼레이션은 실행 코드 없이 시그니처만을 정의한 것이고, **메서드는 이 시그니처에 구현을 더한 것이다.** <br>
하나의 오퍼레이션에 대해 하나의 메서드만 존재하는 경우 둘을 구분할 필요는 없다. 대신 다형성이 필요하면 하나의 오퍼레이션에 여러 메서드가 구현되는데, 오퍼레이션의 관점에서 다형성이란 동일 오퍼레이션 호출에 대해 서로 다른 메서드들이 실행되는 것이라고 정의할 수 있다.


### 클라이언트-서버 모델
구체적인 예시인 클라이언트-서버 모델을 살펴보자. <Br>
두 객체 사이의 협력 관계와 메시지를 쉽게 이해할 수 있는 예시이다. <Br>
우리는 보통 클라이언트에서 서버로 어떤 요청을 보낸다. <br>
클라이언트가 메시지의 전송자가 되고, 서버가 메시지의 수신자가 된다. 여기서의 협력은 클라이언트가 서버의 서비스를 요청하는 단방향 상호작용이 된다. <br>
클라이언트가 서버에게 어떤 메시지를 전송 했을 때, 서버에선 응답을 위해 필요한 정보가 부족할 수도 있다. 그럴 경우 서버는 다른 객체에게 필요한 정보를 받기 위해 메시지를 또 보낸다. <br>
이렇게 협력 안에서 객체는 수신자인 동시에 송신자일 수 있다. <br>
**협력의 관점에서 객체는 두 종류의 메시지 집합으로 구성된다.** 객체가 수신하는 메시지의 집합과 객체가 전송하는 메시지의 집합으로 객체를 구성할 수 있다. <br>
객체는 더 큰 책임을 수행하기 위해 다른 객체와 **협력해야 하고,** 협력을 가능하게 해주는 매개체가 메시지라는 것이다.

## Reference
- 오브젝트 <조영호 지음>
