# 22. 구조체
구조체란 하나 이상의 변수나 포인터, 배열을 묶어 새로운 자료형을 정의하는 도구이다. <br>
구조체를 기반으로 새로운 자료형을 정의할 수 있다. <br>

## 구조체 이전의 세계
구조체가 나오기 전엔 정말 불편한 프로그래밍을 해야 했다. <Br>
마우스의 좌표정보를 저장하고 관리한다고 생각해보자.
```c
int xpos;
int ypos;
```
위와 같이 두개의 자료형을 만들어야 하고,  <br>
두개가 의미적으로 묶여있다는 사실은 나만 알기 때문에, 복잡한 프로그램 작성이나, 변경 과정에서 직접 계속해서 신경을 써 주어야 한다. <br>

**하나의 정보를 여러 변수나 포인터 배열이 표현하고 있을 때, struct를 통해 묶어줄 수 있다!** <br>

### 구조체의 등장
```c
struct point
{
  int xpos;
  int ypos;
}
```

위와 같이 `point`라는 구조체를 통해 두 가지 정보를 아주 쉽게 관리할 수 있게 되었다. <br>
`point`라는 단어는 이제 int, double과 같은 **자료형의 이름이 되는 것이다.** <br>
물론 기본 자료형은 아니다. 그래서 이를 **사용자 정의 자료형 - user defined data type이라고 부른다.** <br> <br>

구조체를 통해 사람을 표현해보자.
```c
struct person
{
  char name[20];
  char phoneNum[20];
  int age;
}
```
너무나도 쉽게 **의미상 서로 관련 있는 정보들을 한대 묶어줄 수 있었다.**

## 22.1 구조체 변수의 선언과 접근
구조체는 자료형과도 같다고 했다. 따라서, 이 자료형들로 **변수를 선언해낼 수 있다.** <br>
```c
struct type_name val_name;
```
이런식으로 선언하고, **구조체 변수라고 부른다.** <br>

위의 `point`와 person을 예시로 들면,
```c
struct point pos;
struct person jinho;
```

위와 같이 선언할 수 있는 것이다. <br>

### 구조체에 접근하기
구조체에는 어떻게 접근할까 기본적으로 아래와 같이 접근할 수 있다
```
<구조체 변수 이름>.<구조체 멤버 이름>
```
위의 예시들을 통해 보자면,
```c
pos.xpos = 20;
printf("%s \n", jinho.name);
```
위와 같이 접근 할 수 있다! 

## 22.2 구조체 변수의 초기화
int형 변수를 선언과 동시에 초기화 할 수 있듯이 **구조체 변수도 선언과 동시에 초기화할 수 있다.**
```c
struct point pos ={ 10, 20 };
struct person jinho = { "진호", "010-0000-0000", 27};
```
위와 같이 바로 초기화 해버릴 수 있다. <Br>
중요한 것은 **맴버의 순서대로 초기화할 대상을 나열하면 된다는 점이다.** <br>

그리고 **초기화 과정에서는 문자열 저장을 위한 strcpy 함수를 호출할 필요가 없다.** <br>

## 22.3 구조체 배열의 선언과 접근
마치 기본 자료형의 '배열'처럼 구조체 또한 배열의 선언이 가능하다. 일반적인 배열의 선언과 똑같다! 
```c
struct point arr[3];
```

구조체 배열의 초기화도 중괄호를 통해 진행할 수 있다. 
```c
struct person arr[3] = {
  {"이진호", "01000000000", 22},
  {"이예린", "01000000000", 20},
  {"이진후", "01000000000", 28}
}
```


## 22.4 구조체 변수와 포인터
구조체 배열의 선언 및 접근의 방법이 일반적인 배열의 선언과 다르지 안듯이 구조체 포인터 변수의 선언 및 연산의 방법도 크게 다르지 않다.

```c
struct point *pptr = &pos;

// 기존 포인터를 다루는 방식과 똑같다!
(*pptr).xpos = 10;
(*pptr).ypos = 20;

pptr->xpos = 10;
pptr->ypos = 20;
```

### 구조체 변수의 주소 값
구조체 변수의 주소 값은 구조체 변수의 첫 번째 맴버의 주소 값과 동일하다.

```c
struct point pos = {10, 20};
struct person man = {"이진호", "01000000000", 28};

// 아래의 결과들은 모두 같은 값을 반환한다.
if (&pos == &pos.xpos) printf("ture\n");
if (&man == &man.name) printf("ture\n");
```

## Reference
- 열혈 C 프로그래밍 <윤성우 저>
